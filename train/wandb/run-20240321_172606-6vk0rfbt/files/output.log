Using cache found in /home/oj/.cache/torch/hub/mateuszbuda_brain-segmentation-pytorch_master
  0%|          | 0/200 [00:00<?, ?it/s]
  0%|          | 0/630 [00:00<?, ?it/s]
Model name : unet
Training Model : unet | status : [42mNEW
[41mFinished Initalization
  0%|          | 0/200 [00:02<?, ?it/s]
Traceback (most recent call last):
  File "./run.py", line 12, in <module>
    main()
  File "./run.py", line 9, in main
    trainer.fit()
  File "/home/oj/spark/train/train.py", line 356, in fit
    train_loss.backward()
  File "/home/oj/anaconda3/envs/fire/lib/python3.8/site-packages/torch/_tensor.py", line 522, in backward
    torch.autograd.backward(
  File "/home/oj/anaconda3/envs/fire/lib/python3.8/site-packages/torch/autograd/__init__.py", line 266, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 384.00 MiB. GPU 0 has a total capacity of 9.77 GiB of which 368.69 MiB is free. Including non-PyTorch memory, this process has 9.41 GiB memory in use. Of the allocated memory 7.78 GiB is allocated by PyTorch, and 260.32 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)